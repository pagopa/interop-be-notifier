/**
 * Notification Notifier Micro Service
 * This service notifies organization about occurred platform events
 *
 * The version of the OpenAPI document: {{version}}
 * Contact: support@example.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package it.pagopa.interop.notifier.client.api

import it.pagopa.interop.notifier.client.model.Events
import it.pagopa.interop.notifier.client.model.Problem
import it.pagopa.interop.notifier.client.invoker._
import it.pagopa.interop.notifier.client.invoker.CollectionFormats._
import it.pagopa.interop.notifier.client.invoker.ApiKeyLocations._

object EventsApi {

  def apply(baseUrl: String = "http://localhost/notifier/}") = new EventsApi(baseUrl)
}

class EventsApi(baseUrl: String) {

  /**
   * Retrieves the list of events sent to the caller
   * 
   * Expected answers:
   *   code 200 : Events (Events)
   *   code 400 : Problem (Bad request)
   *   code 401 : Problem (Unauthorized)
   *   code 404 : Problem (Institution not found)
   * 
   * Available security schemes:
   *   bearerAuth (http)
   * 
   * @param lastEventId returns organization events starting from this last received id
   * @param xCorrelationId 
   * @param xForwardedFor 
   * @param limit the number of events returned by this response
   */
  def getEventsFromId(
    lastEventId: Long,
    xCorrelationId: Option[String] = None,
    xForwardedFor: Option[String] = None,
    limit: Option[Int] = None
  )(implicit bearerToken: BearerToken): ApiRequest[Events] =
    ApiRequest[Events](ApiMethods.GET, baseUrl, "/events", "application/json")
      .withCredentials(bearerToken)
      .withQueryParam("lastEventId", lastEventId)
      .withQueryParam("limit", limit)
      .withHeaderParam("X-Correlation-Id", xCorrelationId)
      .withHeaderParam("X-Forwarded-For", xForwardedFor)
      .withSuccessResponse[Events](200)
      .withErrorResponse[Problem](400)
      .withErrorResponse[Problem](401)
      .withErrorResponse[Problem](404)

}
