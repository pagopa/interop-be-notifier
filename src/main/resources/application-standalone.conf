include "kamon"

akka {
  stdout-loglevel = "OFF"
  loglevel = "DEBUG"
  use-slf4j = on
  coordinated-shutdown.run-by-actor-system-terminate = on

  management {
    http {
      hostname = "0.0.0.0"
      bind-hostname = 0.0.0.0
      route-providers-read-only = false
    }
    health-checks {
      readiness-checks {
        ready = "it.pagopa.interop.notifier.server.impl.HealthCheck"
      }
      liveness-checks {
        live = "it.pagopa.interop.notifier.server.impl.LiveCheck"
      }
    }
  }

  remote.artery {
    canonical.port = 2552
    canonical.hostname = 127.0.0.1
  }

  cluster {
    seed-nodes = ["akka://interop-be-notifier@127.0.0.1:2552"]
    shutdown-after-unsuccessful-join-seed-nodes = 60s
    sharding {
      number-of-shards = 60 //number of nodes * 10
    }
    downing-provider-class = "akka.cluster.sbr.SplitBrainResolverProvider"
  }

  typed {
    stash-capacity = 200000
  }

  persistence {
    journal.plugin = "akka.persistence.journal.inmem"
    snapshot-store.plugin = "akka.persistence.snapshot-store.local"
  }
  projection {
    enabled = false
  }
}

notifier {
  port = 8088
  ec-keys-identifiers = ""
  rsa-keys-identifiers = ""
  ec-keys-identifiers = ${?EC_KEYS_IDENTIFIERS}
  rsa-keys-identifiers = ${?RSA_KEYS_IDENTIFIERS}
  idle-timeout = 60 seconds
  number-of-events-before-snapshot = 1000
  rsa-private-path = ${RSA_PRIVATE_VAULT_PATH}
  jwt {
    audience = ${ACCEPTED_AUDIENCES}
  }
  services {
    agreement-management = ${AGREEMENT_MANAGEMENT_URL}
    purpose-management = ${PURPOSE_MANAGEMENT_URL}
    catalog-management = ${CATALOG_MANAGEMENT_URL}
  }

  dynamo {
    table-name = ${DYNAMO_TABLE_NAME}
  }

  queue {
    url = ${PERSISTENCE_EVENTS_QUEUE_URL}
    thread-pool-size = 3
  }
}

interop-commons {
  vault {
    address = ${VAULT_ADDR}
    token = ${VAULT_TOKEN}
    signature-route = ${VAULT_SIGNATURE_ROUTE}
  }

  jwt {
    public-keys {
      urls = ${WELL_KNOWN_URLS}
    }

    internal-token {
      issuer = ${JWT_ISSUER}
      subject = ${JWT_SUBJECT}
      audience = ${JWT_AUDIENCE}
      duration-seconds = ${JWT_DURATION_SECONDS}
    }
  }
}

futures-dispatcher {
  type = Dispatcher
  executor = "thread-pool-executor"
  throughput = 1
  thread-pool-executor.fixed-pool-size-min = 4
} 