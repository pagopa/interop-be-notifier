akka {
  stdout-loglevel = "OFF"
  loglevel = "DEBUG"
  use-slf4j = on
  coordinated-shutdown.run-by-actor-system-terminate = on
  
  management {
    http {
      bind-hostname = 0.0.0.0
      route-providers-read-only = false
    }
    health-checks {
      readiness-checks {
        ready = "it.pagopa.interop.notifier.server.impl.HealthCheck"
      }
      liveness-checks {
        live = "it.pagopa.interop.notifier.server.impl.LiveCheck"
      }
    }

    cluster.bootstrap {
      contact-point-discovery {
        discovery-method = kubernetes-api
        required-contact-point-nr = ${?REQUIRED_CONTACT_POINT_NR}
      }
    }
  }

  coordinated-shutdown.exit-jvm = on
  actor {
    provider = cluster
    warn-about-java-serializer-usage = on
    allow-java-serialization = on

    serializers {
      event-id-added = "it.pagopa.interop.notifier.model.persistence.serializer.EventIdAddedSerializer"
      event-id-state = "it.pagopa.interop.notifier.model.persistence.serializer.StateSerializer"
    }
    serialization-identifiers {
      "it.pagopa.interop.notifier.model.persistence.serializer.EventIdAddedSerilzer" = 30000
      "it.pagopa.interop.notifier.model.persistence.serializer.StateSerializer" = 40000
      "java.io.serializable" = none
    }
    serialization-bindings {
      "it.pagopa.interop.notifier.model.persistence.EventIdAdded" = event-id-added
      "it.pagopa.interop.notifier.model.persistence.State" = event-id-state
    }
  }

  cluster {
    shutdown-after-unsuccessful-join-seed-nodes = 60s
    sharding {
      passivate-idle-entity-after = 1800 seconds
      number-of-shards = 240 //number of nodes * 10
    }
    downing-provider-class = "akka.cluster.sbr.SplitBrainResolverProvider"
  }

  typed {
    stash-capacity = 200000
  }

}
