include "kamon"

akka {
  loglevel = "INFO"
  logging-filter = "akka.event.slf4j.Slf4jLoggingFilter"
  loggers = ["akka.event.slf4j.Slf4jLogger"]

  coordinated-shutdown.exit-jvm = on

  actor {
    provider = cluster
    warn-about-java-serializer-usage = on
    allow-java-serialization = on

    serializers {
      organization-added = "it.pagopa.interop.notifier.model.persistence.serializer.OrganizationAddedSerializer"
      organization-updated = "it.pagopa.interop.notifier.model.persistence.serializer.OrganizationUpdatedSerializer"
      organization-deleted = "it.pagopa.interop.notifier.model.persistence.serializer.OrganizationDeletedSerializer"
      organizations-state = "it.pagopa.interop.notifier.model.persistence.serializer.OrganizationsStateSerializer"
      event-id-added = "it.pagopa.interop.notifier.model.persistence.serializer.EventIdAddedSerializer"
      event-id-state = "it.pagopa.interop.notifier.model.persistence.serializer.OrganizationNotificationEventIdStateSerializer"
    }
    serialization-identifiers {
      "it.pagopa.interop.notifier.model.persistence.serializer.OrganizationAddedSerializer" = 10000
      "it.pagopa.interop.notifier.model.persistence.serializer.OrganizationDeletedSerializer" = 10001
      "it.pagopa.interop.notifier.model.persistence.serializer.OrganizationUpdatedSerializer" = 10002
      "it.pagopa.interop.notifier.model.persistence.serializer.OrganizationsStateSerializer" = 20000
      "it.pagopa.interop.notifier.model.persistence.serializer.EventIdAddedSerilzer" = 30000
      "it.pagopa.interop.notifier.model.persistence.serializer.OrganizationNotificationEventIdStateSerializer" = 40000
      "java.io.serializable" = none
    }
    serialization-bindings {
      "it.pagopa.interop.notifier.model.persistence.OrganizationAdded" = organization-added
      "it.pagopa.interop.notifier.model.persistence.OrganizationUpdated" = organization-updated
      "it.pagopa.interop.notifier.model.persistence.OrganizationDeleted" = organization-deleted
      "it.pagopa.interop.notifier.model.persistence.OrganizationsState" = organizations-state
      "it.pagopa.interop.notifier.model.persistence.EventIdAdded" = event-id-added
      "it.pagopa.interop.notifier.model.persistence.OrganizationNotificationEventIdState" = event-id-state
    }
  }

  cluster {
    shutdown-after-unsuccessful-join-seed-nodes = 60s
    sharding {
      passivate-idle-entity-after = 1800 seconds
      number-of-shards = 240 //number of nodes * 10
    }
    downing-provider-class = "akka.cluster.sbr.SplitBrainResolverProvider"
  }

  typed {
    stash-capacity = 200000
  }

  management {
    http {
      bind-hostname = 0.0.0.0
      route-providers-read-only = false
    }
    health-checks {
      readiness-checks {
        ready = "it.pagopa.interop.notifier.server.impl.HealthCheck"
      }
      liveness-checks {
        live = "it.pagopa.interop.notifier.server.impl.LiveCheck"
      }
    }
    cluster.bootstrap {
      contact-point-discovery {
        discovery-method = kubernetes-api
        required-contact-point-nr = ${?REQUIRED_CONTACT_POINT_NR}
      }
    }
  }
}

notifier {
  idle-timeout = 60 seconds
  number-of-events-before-snapshot = 1000
  persistence = "memory"
  port = 8088
}
